{"version":3,"sources":["logo.svg","Header.js","Body.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","src","Body","_React$useState","React","useState","top-text","bottom-text","_React$useState2","Object","slicedToArray","formData","setFormData","_React$useState3","_React$useState4","memes","setMemes","useEffect","fetch","then","response","json","data","console","log","_React$useState5","image","_React$useState6","meme","setMeme","press","event","prevFormData","objectSpread","defineProperty","target","name","value","prevMeme","document","getElementById","offsetWidth","onSubmit","preventDefault","randNum","Math","ceil","random","url","type","onChange","autoComplete","placeholder","cjs_default","id","App","src_Header","src_Body","reportWebVitals","onPerfEntry","Function","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.1313bbc5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React from 'react';\r\nimport './Header.css'\r\n\r\nfunction Header(){\r\n    return(\r\n        <div className=\"header\">\r\n            <div className=\"logo-and-title\">\r\n                <img src=\"https://github.com/Gamingapple0/memegenerator/blob/gh-pages/favicon.ico?raw=true\" className=\"logo\"/>\r\n                <div className=\"logo-title\">Meme Generator</div>\r\n            </div>\r\n            <div className=\"project-name\">\r\n                React Project Meme Generator\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Header\r\n","import './Body.css'\r\nimport Draggable from 'react-draggable'\r\nimport React from 'react';\r\n\r\n\r\n\r\nfunction Body(){\r\n    const [formData, setFormData] = React.useState({'top-text':'','bottom-text':''})\r\n    const [memes, setMemes] = React.useState({})\r\n\r\n    React.useEffect(() => {\r\n    fetch('https://api.imgflip.com/get_memes')\r\n    .then((response) => response.json())\r\n    .then((data)=>setMemes(data))    \r\n    console.log('fetched')\r\n    }, [])\r\n\r\n    console.log('b')\r\n    const [meme, setMeme] = React.useState({'top-text':'Top Text','bottom-text':'Bottom Text','image':'https://i.imgflip.com/2wifvo.jpg'})\r\n\r\n\r\n    function submit(event){\r\n        event.preventDefault()\r\n        let randNum = Math.ceil(Math.random() * 99);\r\n        setMeme((prevMeme)=>{\r\n            return ({\r\n                ...prevMeme,\r\n                'image': memes.data.memes[randNum].url\r\n            })\r\n        })\r\n        \r\n    }\r\n\r\n    function press(event){\r\n        // console.log(formData[event.target.name])\r\n        setFormData(\r\n            prevFormData => {\r\n                return ({...prevFormData, [event.target.name]:event.target.value})\r\n            }\r\n        )\r\n        setMeme(\r\n            prevMeme =>{\r\n                return ({\r\n                    ...prevMeme,\r\n                    [event.target.name]:event.target.value\r\n                })\r\n            }\r\n        )\r\n        let a = document.getElementById('main-image').offsetWidth;\r\n\r\n    }\r\n    return(\r\n        <div className=\"body\">\r\n            <form onSubmit={submit} className=\"form\">\r\n                <input type=\"text\" onChange={press} autoComplete=\"off\" placeholder=\"Top text\" name='top-text' className='top-text' value={formData['top-text']}/>\r\n                <input type=\"text\" onChange={press} autoComplete=\"off\" placeholder=\"Bottom text\" name='bottom-text' className='bottom-text' value={formData['bottom-text']}/>\r\n                <button className='submit'>Get a new meme image</button>\r\n            </form>\r\n            <div>\r\n            <Draggable>\r\n            <div className=\"top-text-1\">{meme['top-text']}</div>\r\n            </Draggable>\r\n            <Draggable>\r\n            <div className=\"bottom-text-1\">{meme['bottom-text']}</div>\r\n            </Draggable>\r\n            \r\n            <img id=\"main-image\" src={meme.image}></img> \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Body\r\n","import logo from './logo.svg';\nimport React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Body from './Body';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>   \n      <Body/>\n    </div>\n  );\n}\n\nexport default App;\n\n\n// <header className=\"App-header\">\n// <img src={logo} className=\"App-logo\" alt=\"logo\" />\n// <p>\n//   Edit <code>src/App.js</code> and save to reload.\n// </p>\n// <a\n//   className=\"App-link\"\n//   href=\"https://reactjs.org\"\n//   target=\"_blank\"\n//   rel=\"noopener noreferrer\"\n// >\n//   Learn React\n// </a>\n// </header>","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}